generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int                 @id @default(autoincrement())
  clerkId        String              @unique
  email          String              @unique
  firstName      String
  lastName       String
  nickName       String?
  admin          Boolean             @default(false)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  favTeamId      String?
  favoriteTeam   Team?               @relation("UserFavoriteTeam", fields: [favTeamId], references: [id])
  participations UserParticipation[]
  wagers         Wager[]

  @@index([favTeamId])
}

model Season {
  id             Int                 @id @default(autoincrement())
  name           String              @unique
  year           Int
  active         Boolean             @default(true)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  games          Game[]
  participations UserParticipation[]
  weeks          Week[]
}

model League {
  id             Int                 @id @default(autoincrement())
  name           String              @unique
  description    String              @db.Text
  active         Boolean             @default(true)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  participations UserParticipation[]
  wagers         Wager[]
}

model UserParticipation {
  id        Int      @id @default(autoincrement())
  leagueId  Int
  seasonId  Int
  userId    Int
  active    Boolean  @default(true)
  balance   Float    @default(1000)
  minBet    Float    @default(0)
  maxBet    Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  league    League   @relation(fields: [leagueId], references: [id])
  season    Season   @relation(fields: [seasonId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([leagueId, seasonId, userId])
  @@index([leagueId])
  @@index([seasonId])
  @@index([userId])
}

model Team {
  id           String   @id @default(uuid())
  providerId   String   @unique
  name         String
  conference   String
  mascot       String
  abbreviation String   @unique
  division     String
  logo         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  rank         Int?
  awayGames    Game[]   @relation("AwayTeam")
  homeGames    Game[]   @relation("HomeTeam")
  resultGames  Game[]   @relation("ResultTeam")
  favoriteOf   User[]   @relation("UserFavoriteTeam")

  @@index([providerId])
  @@index([name])
  @@index([conference])
  @@index([division])
}

model Week {
  id            Int      @id @default(autoincrement())
  seasonId      Int
  week          Int
  startDate     DateTime
  endDate       DateTime
  wagersAllowed Boolean  @default(false)
  wagersCutoff  DateTime
  active        Boolean  @default(false)
  activeSync    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  games         Game[]
  season        Season   @relation(fields: [seasonId], references: [id])

  @@index([seasonId])
}

model Game {
  id             Int      @id @default(autoincrement())
  providerGameId Int?
  seasonId       Int
  weekId         Int
  startDate      DateTime
  completed      Boolean  @default(false)
  neutralSite    Boolean  @default(false)
  homeId         String
  homePoints     Int?
  spread         Float?
  startingSpread Float?
  awayId         String
  awayPoints     Int?
  resultId       String?
  venue          String?
  active         Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  awayTeam       Team     @relation("AwayTeam", fields: [awayId], references: [id])
  homeTeam       Team     @relation("HomeTeam", fields: [homeId], references: [id])
  resultTeam     Team?    @relation("ResultTeam", fields: [resultId], references: [id])
  season         Season   @relation(fields: [seasonId], references: [id])
  week           Week     @relation(fields: [weekId], references: [id])
  wagers         Wager[]

  @@index([seasonId])
  @@index([weekId])
  @@index([homeId])
  @@index([awayId])
  @@index([resultId])
  @@index([providerGameId])
}

model Wager {
  id            Int      @id @default(autoincrement())
  userId        Int
  gameId        Int
  leagueId      Int
  pick          String
  amount        Int      @default(0)
  won           Boolean?
  balanceImpact Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  game          Game     @relation(fields: [gameId], references: [id])
  league        League   @relation(fields: [leagueId], references: [id])
  user          User     @relation(fields: [userId], references: [id])

  @@unique([userId, gameId, leagueId])
  @@index([userId])
  @@index([gameId])
  @@index([leagueId])
}

model EmailReminder {
  id        Int      @id @default(autoincrement())
  userId    String
  email     String
  subject   String
  sentAt    DateTime @default(now())
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([sentAt])
}
